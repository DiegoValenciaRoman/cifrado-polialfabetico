{"version":3,"sources":["Alfabeto.js","App.js","reportWebVitals.js","index.js"],"names":["alfabeto","App","alf","useState","textmuted","textoplano","c1","c2","secuencia","form","setForm","textoEncriptadoFinal","setTextoEncriptadoFinal","textoDesencriptadoFinal","setTextoDesencriptadoFinal","historial","setHistorial","bottomRefDiv","createRef","preFormatVariables","textToEncode","toReplace","replaceWith","toLowerCase","replaceAll","replaceFromText","secuenceArray","secuence","length","split","repeticiones","Math","trunc","repeat","modifySecuenceToMatchTextSize","k1","k2","map","sec","Number","transformSecuenceToKValues","cifrar","encodedText","indexOf","finalText","i","createEncodedText","addToHistory","current","scrollIntoView","behavior","descrifrar","decodedText","textToDecode","abs","createDecodedText","text","editedText","type","aux","push","tipo","texto","handleChange","e","target","id","value","console","log","onSubmit","action","useEffect","className","style","margin","Container","fluid","Row","Col","xs","maxHeight","overflowX","evento","Card","bg","width","Header","Body","Title","Text","ref","Form","Group","Label","Control","placeholder","onChange","Button","variant","onClick","marginLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2b881c1.chunk.js","sourcesContent":["export const alfabeto = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n];\n","import {\n  Alert,\n  Button,\n  Card,\n  Col,\n  Container,\n  Form,\n  Row,\n} from \"react-bootstrap\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useEffect, useState, createRef } from \"react\";\nimport { alfabeto } from \"./Alfabeto\";\nfunction App() {\n  const alf = alfabeto;\n  const [textmuted, setTextmuted] = useState(\n    \"Ingrese texto a cifrar o descrifrar\"\n  );\n  const [form, setForm] = useState({\n    textoplano: \"\",\n    c1: \"\",\n    c2: \"\",\n    secuencia: \"\",\n  });\n  const [textoEncriptadoFinal, setTextoEncriptadoFinal] = useState(\"\");\n  const [textoDesencriptadoFinal, setTextoDesencriptadoFinal] = useState(\"\");\n  const [historial, setHistorial] = useState([]);\n  const bottomRefDiv = createRef();\n\n  //funcion que retorna el texto original en minusculas y reemplazar\n  //algun caracter por otro\n  const replaceFromText = (text = \" \", toReplace = \" \", replaceWith = \" \") => {\n    return text.toLowerCase().replaceAll(toReplace, replaceWith);\n  };\n\n  //funcion que retorna la secuencia original pero de un largo igual o mayor\n  //al texto que se va a encriptar\n  const modifySecuenceToMatchTextSize = (textToEncode = \" \", secuence = \"\") => {\n    if (textToEncode.length <= secuence.split(\",\").length) {\n      return secuence.split(\",\");\n    } else {\n      let repeticiones = Math.trunc(\n        textToEncode.length / secuence.split(\",\").length\n      );\n      return (secuence + \",\").repeat(repeticiones + 1).split(\",\");\n    }\n  };\n  const transformSecuenceToKValues = (secuenceArray, k1, k2) => {\n    //console.log(secuenceArray, \"\\nk1:\", k1, \"\\nk2:\", k2);\n    return secuenceArray.map((sec) => {\n      if (sec === \"c1\") {\n        return Number(k1);\n      } else {\n        return Number(k2);\n      }\n    });\n  };\n\n  const createEncodedText = (textToEncode, secuenceArray) => {\n    let indexOf;\n    let auxVal;\n    let finalText = \"\";\n    for (let i = 0; i < textToEncode.length; i++) {\n      indexOf = alf.indexOf(textToEncode[i]);\n      if (indexOf + secuenceArray[i] < alf.length) {\n        auxVal = alf[indexOf + secuenceArray[i]];\n        finalText = finalText + auxVal;\n      } else {\n        auxVal = alf[indexOf + secuenceArray[i] - alf.length];\n        finalText = finalText + auxVal;\n      }\n    }\n    return finalText;\n  };\n\n  const createDecodedText = (textToDecode, secuenceArray) => {\n    let indexOf;\n    let auxVal;\n    let finalText = \"\";\n    for (let i = 0; i < textToDecode.length; i++) {\n      indexOf = alf.indexOf(textToDecode[i]);\n      if (indexOf - secuenceArray[i] < 0) {\n        auxVal = alf[alf.length - Math.abs(indexOf - secuenceArray[i])];\n        finalText = finalText + auxVal;\n      } else {\n        auxVal = alf[indexOf - secuenceArray[i]];\n        finalText = finalText + auxVal;\n      }\n    }\n    return finalText;\n  };\n\n  const preFormatVariables = () => {\n    let textToEncode = replaceFromText(form.textoplano, \" \", \"x\");\n    let secuenceArray = modifySecuenceToMatchTextSize(\n      textToEncode,\n      form.secuencia\n    );\n    secuenceArray = transformSecuenceToKValues(secuenceArray, form.c1, form.c2);\n    return [textToEncode, secuenceArray];\n  };\n  const cifrar = () => {\n    let [textToEncode, secuenceArray] = preFormatVariables();\n    let encodedText = createEncodedText(textToEncode, secuenceArray);\n    setTextoEncriptadoFinal(encodedText);\n    addToHistory(\n      form.textoplano,\n      form.c1,\n      form.c2,\n      form.secuencia,\n      encodedText,\n      \"cifrado\"\n    );\n    bottomRefDiv.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const descrifrar = () => {\n    let [textToEncode, secuenceArray] = preFormatVariables();\n    let decodedText = createDecodedText(textToEncode, secuenceArray);\n    setTextoDesencriptadoFinal(decodedText);\n    addToHistory(\n      form.textoplano,\n      form.c1,\n      form.c2,\n      form.secuencia,\n      decodedText,\n      \"descifrado\"\n    );\n    bottomRefDiv.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const addToHistory = (text, c1, c2, secuence, editedText, type) => {\n    let aux = historial;\n    aux.push({\n      tipo: type,\n      texto: text,\n      c1: c1,\n      c2: c2,\n      secuence: secuence,\n      editedText: editedText,\n    });\n    setHistorial(aux);\n  };\n\n  const handleChange = (e) => {\n    let aux = form;\n    form[e.target.id] = e.target.value;\n    setForm(aux);\n    console.log(aux);\n  };\n\n  const onSubmit = (action) => {\n    if (action == \"en\") {\n      cifrar();\n    } else {\n      descrifrar();\n    }\n  };\n  useEffect(() => {\n    console.log(alfabeto);\n    return () => {};\n  }, []);\n  return (\n    <div className=\"App\" style={{ margin: \"2%\" }}>\n      <Container fluid>\n        <Row style={{ margin: \"10%\" }}>\n          <Col xs=\"2\"></Col>\n          <Col xs=\"8\">\n            <h2>Taller 2 Gestion de seguridad: Cifrado polialfabetico</h2>\n          </Col>\n          <Col xs=\"2\"></Col>\n        </Row>\n\n        <Row>\n          <Col xs>\n            <p>Historial</p>\n            <div style={{ maxHeight: \"500px\", overflowX: \"auto\" }}>\n              {historial.map((evento) => (\n                <Card\n                  bg={evento.tipo === \"cifrado\" ? \"secondary\" : \"primary\"}\n                  text={\"light\" === \"light\" ? \"white\" : \"white\"}\n                  style={{ width: \"18rem\" }}\n                  className=\"mb-2\"\n                >\n                  <Card.Header>\n                    <b>{evento.tipo}</b>\n                  </Card.Header>\n                  <Card.Body>\n                    <Card.Title> Texo: {evento.texto} </Card.Title>\n                    <Card.Text>\n                      <p>\n                        c1:{evento.c1}, c2:{evento.c2}\n                      </p>\n                      <p>secuencia: {evento.secuence}</p>\n                      <p>resultado: {evento.editedText}</p>\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              ))}\n              <div ref={bottomRefDiv}></div>\n            </div>\n          </Col>\n          <Col xs>\n            <Form>\n              <Form.Group>\n                <Form.Label>texto</Form.Label>\n                <Form.Control\n                  id=\"textoplano\"\n                  type=\"text\"\n                  placeholder=\"textoplano\"\n                  onChange={handleChange}\n                />\n                <Form.Text className=\"text-muted\">{textmuted}</Form.Text>\n              </Form.Group>\n              <Row>\n                <Col>\n                  {\" \"}\n                  <Form.Group>\n                    <Form.Label>C1</Form.Label>\n                    <Form.Control\n                      id=\"c1\"\n                      type=\"text\"\n                      placeholder=\"k=\"\n                      onChange={handleChange}\n                    />\n                    <Form.Text className=\"text-muted\">corrimiento</Form.Text>\n                  </Form.Group>\n                </Col>\n                <Col>\n                  {\" \"}\n                  <Form.Group>\n                    <Form.Label>C2</Form.Label>\n                    <Form.Control\n                      id=\"c2\"\n                      type=\"text\"\n                      placeholder=\"k=\"\n                      onChange={handleChange}\n                    />\n                    <Form.Text className=\"text-muted\">corrimiento</Form.Text>\n                  </Form.Group>\n                </Col>\n              </Row>\n              <Form.Group>\n                <Form.Label>Secuencia</Form.Label>\n                <Form.Control\n                  id=\"secuencia\"\n                  type=\"text\"\n                  placeholder=\"secuencia\"\n                  onChange={handleChange}\n                />\n                <Form.Text className=\"text-muted\">ej:c1,c2,c2</Form.Text>\n              </Form.Group>\n              <Button\n                variant=\"primary\"\n                onClick={() => {\n                  onSubmit(\"en\");\n                }}\n              >\n                Encriptar\n              </Button>\n              <Button\n                style={{ marginLeft: \"4%\" }}\n                variant=\"primary\"\n                onClick={() => {\n                  onSubmit(\"des\");\n                }}\n              >\n                Desencriptar\n              </Button>\n            </Form>\n          </Col>\n          <Col xs>\n            Resultado encriptado:<p>{textoEncriptadoFinal}</p>\n          </Col>\n          <Col xs>\n            Resultado descifrado <p>{textoDesencriptadoFinal}</p>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}